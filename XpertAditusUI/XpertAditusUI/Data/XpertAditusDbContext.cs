// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using XpertAditusUI.Models;

#nullable disable

namespace XpertAditusUI.Data
{
    public partial class XpertAditusDbContext : DbContext
    {
        public XpertAditusDbContext()
        {
        }

        public XpertAditusDbContext(DbContextOptions<XpertAditusDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Admission> Admission { get; set; }
        public virtual DbSet<AppliedJobs> AppliedJobs { get; set; }
        public virtual DbSet<ApprovalJobs> ApprovalJobs { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<CandidateCollegeMapping> CandidateCollegeMapping { get; set; }
        public virtual DbSet<CandidateResult> CandidateResult { get; set; }
        public virtual DbSet<CandidateTrainingStatus> CandidateTrainingStatus { get; set; }
        public virtual DbSet<CityMaster> CityMaster { get; set; }
        public virtual DbSet<CollegeAttachments> CollegeAttachments { get; set; }
        public virtual DbSet<CollegeCourseSpecializationMapping> CollegeCourseSpecializationMapping { get; set; }
        public virtual DbSet<CollegeProfile> CollegeProfile { get; set; }
        public virtual DbSet<CollegeStudentMapping> CollegeStudentMapping { get; set; }
        public virtual DbSet<CompanyProfile> CompanyProfile { get; set; }
        public virtual DbSet<CountryMaster> CountryMaster { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<CourseMaster> CourseMaster { get; set; }
        public virtual DbSet<CourseSpecializationMapping> CourseSpecializationMapping { get; set; }
        public virtual DbSet<Courses> Courses { get; set; }
        public virtual DbSet<Disclaimer> Disclaimer { get; set; }
        public virtual DbSet<DisclaimerAccetped> DisclaimerAccetped { get; set; }
        public virtual DbSet<DistrictMaster> DistrictMaster { get; set; }
        public virtual DbSet<EducationMaster> EducationMaster { get; set; }
        public virtual DbSet<Experience> Experience { get; set; }
        public virtual DbSet<InterviewResult> InterviewResult { get; set; }
        public virtual DbSet<JobMaster> JobMaster { get; set; }
        public virtual DbSet<JobQualification> JobQualification { get; set; }
        public virtual DbSet<OtpMaster> OtpMaster { get; set; }
        public virtual DbSet<PacandidateResult> PacandidateResult { get; set; }
        public virtual DbSet<Padisclaimer> Padisclaimer { get; set; }
        public virtual DbSet<PadisclaimerAccetped> PadisclaimerAccetped { get; set; }
        public virtual DbSet<PamonthlyTest> PamonthlyTest { get; set; }
        public virtual DbSet<Paquestionnaire> Paquestionnaire { get; set; }
        public virtual DbSet<PaquestionnaireResult> PaquestionnaireResult { get; set; }
        public virtual DbSet<PatestCaseAttachments> PatestCaseAttachments { get; set; }
        public virtual DbSet<PatestScenario> PatestScenario { get; set; }
        public virtual DbSet<PatrainingContentMaster> PatrainingContentMaster { get; set; }
        public virtual DbSet<PavideoQuestionResult> PavideoQuestionResult { get; set; }
        public virtual DbSet<PaymentHistory> PaymentHistory { get; set; }
        public virtual DbSet<PpoInfo> PpoInfo { get; set; }
        public virtual DbSet<PpoLogic> PpoLogic { get; set; }
        public virtual DbSet<Qualification> Qualification { get; set; }
        public virtual DbSet<Questionnaire> Questionnaire { get; set; }
        public virtual DbSet<QuestionnaireResult> QuestionnaireResult { get; set; }
        public virtual DbSet<SentNotifications> SentNotifications { get; set; }
        public virtual DbSet<ShortlistedCandidates> ShortlistedCandidates { get; set; }
        public virtual DbSet<SpecializationMaster> SpecializationMaster { get; set; }
        public virtual DbSet<StateMaster> StateMaster { get; set; }
        public virtual DbSet<TestScenario> TestScenario { get; set; }
        public virtual DbSet<TrainingContentsMaster> TrainingContentsMaster { get; set; }
        public virtual DbSet<UserCourses> UserCourses { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.Property(e => e.AddressId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Address_CityMaster__CityId");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Address_CountryMaster__CountryId");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.AddressCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Address_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Address_DistrictMaster__DistrictId");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.AddressModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Address_AspnetUsers_ModifiedBy");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Address_StateMaster__StateId");
            });

            modelBuilder.Entity<Admission>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.AdmissionCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Admission_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.AdmissionUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_Admission_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<AppliedJobs>(entity =>
            {
                entity.HasKey(e => e.AppliedJobId)
                    .HasName("PK__AppliedJ__AF19BB4BE5768358");

                entity.Property(e => e.AppliedJobId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.AppliedJobsCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_AppliedJobs_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.AppliedJobsModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_AppliedJobs_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<ApprovalJobs>(entity =>
            {
                entity.HasKey(e => e.ApprovalJobId)
                    .HasName("PK__Approval__CADB9275615B1F18");

                entity.Property(e => e.ApprovalJobId).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.Property(e => e.ModifiedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ApprovalJobsCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__ApprovalJ__Creat__5C37ACAD");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.ApprovalJobs)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK__ApprovalJ__JobId__5D2BD0E6");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.ApprovalJobsModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__ApprovalJ__Modif__5E1FF51F");

                entity.HasOne(d => d.UserProfile)
                    .WithMany(p => p.ApprovalJobs)
                    .HasForeignKey(d => d.UserProfileId)
                    .HasConstraintName("FK__ApprovalJ__UserP__5F141958");
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");
            });

            modelBuilder.Entity<CandidateCollegeMapping>(entity =>
            {
                entity.HasKey(e => e.CandidateCollegeId)
                    .HasName("PK__Candidat__01C671097D3F7D36");

                entity.Property(e => e.CandidateCollegeId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CandidateCollegeMappingCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CandidateCollegeMapping_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.CandidateCollegeMappingUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_CandidateCollegeMapping_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<CandidateResult>(entity =>
            {
                entity.Property(e => e.CandidateResultId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CandidateResult)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CandidateResult_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<CandidateTrainingStatus>(entity =>
            {
                entity.Property(e => e.CandidateTrainingStatusId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CandidateTrainingStatus)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CandidateTrainingStatus_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<CityMaster>(entity =>
            {
                entity.HasKey(e => e.CityId)
                    .HasName("PK__CityMast__F2D21B76E496F478");

                entity.Property(e => e.CityId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CityMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CityMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.CityMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_CityMaster_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<CollegeAttachments>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CollegeAttachmentsCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CollegeAttachments_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.CollegeAttachmentsModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_CollegeAttachments_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<CollegeCourseSpecializationMapping>(entity =>
            {
                entity.HasKey(e => e.CollegeCourseSpecializationId)
                    .HasName("PK__tmp_ms_x__DCB3613F1DB9236D");

                entity.Property(e => e.CollegeCourseSpecializationId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CollegeCourseSpecializationMappingCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CollegeCourseSpecializationMapping_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.Specialzation)
                    .WithMany(p => p.CollegeCourseSpecializationMapping)
                    .HasForeignKey(d => d.SpecialzationId)
                    .HasConstraintName("FK_CollegeCourseSpecializationMapping_SpecializationMaster_SpecializationId");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.CollegeCourseSpecializationMappingUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_CollegeCourseSpecializationMapping_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<CollegeProfile>(entity =>
            {
                entity.Property(e => e.CollegeProfileId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CollegeProfileCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CollegeProfile_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.CollegeProfileLogin)
                    .HasForeignKey(d => d.LoginId)
                    .HasConstraintName("FK_CollegeProfile_AspnetUsers_LoginId  ");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.CollegeProfileUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_CollegeProfile_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<CollegeStudentMapping>(entity =>
            {
                entity.Property(e => e.CollegeStudentMappingId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CollegeStudentMappingCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CollegeStudentMapping_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.CollegeStudentMappingLogin)
                    .HasForeignKey(d => d.LoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CollegeStudentMapping_AspnetUsers_ID");
            });

            modelBuilder.Entity<CompanyProfile>(entity =>
            {
                entity.Property(e => e.CompanyProfileId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CompanyProfileCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CompanyProfile_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.CompanyProfileLogin)
                    .HasForeignKey(d => d.LoginId)
                    .HasConstraintName("FK_CompanyProfile_AspnetUsers_LoginId  ");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.CompanyProfileUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_CompanyProfile_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<CountryMaster>(entity =>
            {
                entity.HasKey(e => e.CountryId)
                    .HasName("PK__CountryM__10D1609F376B1AE6");

                entity.Property(e => e.CountryId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CountryMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CountryMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.CountryMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_CountryMaster_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.Property(e => e.CourseId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CourseCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Course_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.CourseModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Course_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<CourseMaster>(entity =>
            {
                entity.HasKey(e => e.CourseId)
                    .HasName("PK__CourseMa__C92D71A73FC40452");

                entity.Property(e => e.CourseId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CourseMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CourseMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.CourseMasterUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_CourseMaster_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<CourseSpecializationMapping>(entity =>
            {
                entity.HasKey(e => e.CourseSpecializationId)
                    .HasName("PK__CourseSp__502C9618DA00F008");

                entity.Property(e => e.CourseSpecializationId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CourseSpecializationMappingCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CourseSpecializationMapping_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.CourseSpecializationMappingUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_CourseSpecializationMapping_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<Courses>(entity =>
            {
                entity.HasKey(e => e.CourseId)
                    .HasName("PK__Courses__C92D71A74C43F762");

                entity.Property(e => e.CourseId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Disclaimer>(entity =>
            {
                entity.Property(e => e.DisclaimerId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Disclaimer)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_Disclaimer_Course_CreatedBy");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.DisclaimerCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Disclaimer_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.DisclaimerModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Disclaimer_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<DisclaimerAccetped>(entity =>
            {
                entity.HasKey(e => e.DisclaimerAcceptedId)
                    .HasName("PK__Disclaim__26984FD42B5C971D");

                entity.Property(e => e.DisclaimerAcceptedId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.DisclaimerAccetped)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_DisclaimerAccetped_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<DistrictMaster>(entity =>
            {
                entity.HasKey(e => e.DistrictId)
                    .HasName("PK__District__85FDA4C691FEED36");

                entity.Property(e => e.DistrictId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.DistrictMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_DistrictMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.DistrictMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_DistrictMaster_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<EducationMaster>(entity =>
            {
                entity.HasKey(e => e.EducationId)
                    .HasName("PK__Educatio__4BBE38058854A90F");

                entity.Property(e => e.EducationId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.EducationMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_EducationMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.EducationMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_EducationMaster_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<Experience>(entity =>
            {
                entity.Property(e => e.ExperienceId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ExperienceCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Experience_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.ExperienceModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Experience_AspnetUsers_ModifiedBy");

                entity.HasOne(d => d.UserProfile)
                    .WithMany(p => p.Experience)
                    .HasForeignKey(d => d.UserProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<InterviewResult>(entity =>
            {
                entity.Property(e => e.InterviewResultId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.InterviewResultCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_InterviewResult_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.InterviewResultModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_InterviewResult_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<JobMaster>(entity =>
            {
                entity.HasKey(e => e.JobId)
                    .HasName("PK__JobMaste__056690C220E9F62D");

                entity.Property(e => e.JobId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.JobMaster)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_JobMaster_CountryMaster__CountryId");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.JobMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_JobMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.JobMaster)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_JobMaster_DistrictMaster__DistrictId");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.JobMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_JobMaster_AspnetUsers_ModifiedBy");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.JobMaster)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_JobMaster_StateMaster__StateId");
            });

            modelBuilder.Entity<JobQualification>(entity =>
            {
                entity.Property(e => e.JobQualificationId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.JobQualificationCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_JobQualification_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.JobQualificationModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_JobQualification_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<OtpMaster>(entity =>
            {
                entity.Property(e => e.OtpMasterId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsVerified).IsFixedLength(true);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.OtpMaster)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_OtpMaster_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<PacandidateResult>(entity =>
            {
                entity.Property(e => e.PacandidateResultId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PacandidateResult)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PACandidateResult_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.MonthlyTest)
                    .WithMany(p => p.PacandidateResult)
                    .HasForeignKey(d => d.MonthlyTestId)
                    .HasConstraintName("FK_PACandidateResult_MonthlyTest_MonthlyTestID");
            });

            modelBuilder.Entity<Padisclaimer>(entity =>
            {
                entity.Property(e => e.PadisclaimerId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PadisclaimerCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PADisclaimer_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.PadisclaimerModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PADisclaimer_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<PadisclaimerAccetped>(entity =>
            {
                entity.HasKey(e => e.PadisclaimerAcceptedId)
                    .HasName("PK__PADiscla__FC0743C2836C31EA");

                entity.Property(e => e.PadisclaimerAcceptedId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PadisclaimerAccetped)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PADisclaimerAccetped_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.Padisclaimer)
                    .WithMany(p => p.PadisclaimerAccetped)
                    .HasForeignKey(d => d.PadisclaimerId)
                    .HasConstraintName("FK_PADisclaimerAccetped_PADisclaimer_DisclaimerId");
            });

            modelBuilder.Entity<PamonthlyTest>(entity =>
            {
                entity.HasKey(e => e.MonthlyTestId)
                    .HasName("PK__PAMonthl__855DF5A9A1AF1843");

                entity.Property(e => e.MonthlyTestId).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.PamonthlyTest)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Paquestionnaire>(entity =>
            {
                entity.Property(e => e.PaquestionnaireId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PaquestionnaireCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PAQuestionnaire_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.PaquestionnaireModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PAQuestionnaire_AspnetUsers_ModifiedBy");

                entity.HasOne(d => d.PatrainingContent)
                    .WithMany(p => p.Paquestionnaire)
                    .HasForeignKey(d => d.PatrainingContentId)
                    .HasConstraintName("FK_PAQuestionnaire_PATrainingContentMaster_ModifiedBy");
            });

            modelBuilder.Entity<PaquestionnaireResult>(entity =>
            {
                entity.Property(e => e.PaquestionnaireResultId).ValueGeneratedNever();

                entity.Property(e => e.AnswerProvided).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CandidateResult)
                    .WithMany(p => p.PaquestionnaireResult)
                    .HasForeignKey(d => d.CandidateResultId)
                    .HasConstraintName("FK_PAQuestionnaireResult_PACandidateResult_PACandidateResultId");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PaquestionnaireResultCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PAQuestionnaireResult_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.PaquestionnaireResultModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PAQuestionnaireResult_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<PatestCaseAttachments>(entity =>
            {
                entity.HasKey(e => e.TestCaseAttachmentId)
                    .HasName("PK__PATestCa__7EB4D83BA48C1EE8");

                entity.Property(e => e.TestCaseAttachmentId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PatestCaseAttachments)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PATestCaseAttachments_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<PatestScenario>(entity =>
            {
                entity.Property(e => e.PatestScenarioId).ValueGeneratedNever();

                entity.HasOne(d => d.TrainingContents)
                    .WithMany(p => p.PatestScenario)
                    .HasForeignKey(d => d.TrainingContentsId)
                    .HasConstraintName("FK_PATestScenario_PATrainingContent_TrainingContentsId");
            });

            modelBuilder.Entity<PatrainingContentMaster>(entity =>
            {
                entity.HasKey(e => e.TrainingContentId)
                    .HasName("PK__PATraini__0F309CEF768B91D7");

                entity.Property(e => e.TrainingContentId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PatrainingContentMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PATrainingContentMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.PatrainingContentMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PATrainingContentMaster_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<PavideoQuestionResult>(entity =>
            {
                entity.HasKey(e => e.VideoQuestionResultId)
                    .HasName("PK__tmp_ms_x__8A3631B5DA26D5F9");

                entity.Property(e => e.VideoQuestionResultId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CandidateResult)
                    .WithMany(p => p.PavideoQuestionResult)
                    .HasForeignKey(d => d.CandidateResultId)
                    .HasConstraintName("FK_PAVideoQuestionResult_PACandidateResult_PACandidateResultId");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PavideoQuestionResultCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PAVideoQuestionResult_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.PavideoQuestionResultModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PAVideoQuestionResult_AspnetUsers_ModifiedBy");

                entity.HasOne(d => d.Paquestionnaire)
                    .WithMany(p => p.PavideoQuestionResult)
                    .HasForeignKey(d => d.PaquestionnaireId)
                    .HasConstraintName("FK_PAVideoQuestionResult_PAQuestionnaire_QuestionnaireId");
            });

            modelBuilder.Entity<PaymentHistory>(entity =>
            {
                entity.Property(e => e.PaymentHistoryId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PaymentHistory)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PaymentHistory_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<PpoInfo>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.UserProfile)
                    .WithMany(p => p.PpoInfo)
                    .HasForeignKey(d => d.UserProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PpoInfo_UserProfile_UserProfileId ");
            });

            modelBuilder.Entity<PpoLogic>(entity =>
            {
                entity.Property(e => e.PpoLogicId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PpoLogic)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PpoLogic_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<Qualification>(entity =>
            {
                entity.HasKey(e => e.QualificaitonId)
                    .HasName("PK__Qualific__DDF7B7422DE882DD");

                entity.Property(e => e.QualificaitonId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.QualificationCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Qualification_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.QualificationModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Qualification_AspnetUsers_ModifiedBy");

                entity.HasOne(d => d.UserProfile)
                    .WithMany(p => p.Qualification)
                    .HasForeignKey(d => d.UserProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Questionnaire>(entity =>
            {
                entity.Property(e => e.QuestionnaireId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Questionnaire)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_Questionnaire_Course_CreatedBy");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.QuestionnaireCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Questionnaire_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.QuestionnaireModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Questionnaire_AspnetUsers_ModifiedBy");

                entity.HasOne(d => d.TrainingContent)
                    .WithMany(p => p.Questionnaire)
                    .HasForeignKey(d => d.TrainingContentId)
                    .HasConstraintName("FK_Questionnaire_TrainingContentsMaster_CreatedBy");
            });

            modelBuilder.Entity<QuestionnaireResult>(entity =>
            {
                entity.Property(e => e.QuestionnaireResultId).ValueGeneratedNever();

                entity.Property(e => e.AnswerProvided).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.QuestionnaireResultCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_QuestionnaireResult_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.QuestionnaireResultModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_QuestionnaireResult_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<SentNotifications>(entity =>
            {
                entity.Property(e => e.SentNotificationsId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.SentNotificationsCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_SentNotifications_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.SentNotificationsModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_SentNotifications_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<ShortlistedCandidates>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ShortlistedCandidatesCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ShortlistedCandidates_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.ShortlistedCandidatesModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ShortlistedCandidates_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<SpecializationMaster>(entity =>
            {
                entity.Property(e => e.SpecializationId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.SpecializationMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_SpecializationMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.SpecializationMasterUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_SpecializationMaster_AspnetUsers_UpdatedBy");
            });

            modelBuilder.Entity<StateMaster>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("PK__StateMas__C3BA3B3A9E5B3951");

                entity.Property(e => e.StateId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.StateMaster)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_StateMaster_Country_CountryId");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.StateMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_StateMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.StateMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_StateMaster_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<TestScenario>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<TrainingContentsMaster>(entity =>
            {
                entity.HasKey(e => e.TrainingContentId)
                    .HasName("PK__Training__0F309CEF81C79DAB");

                entity.Property(e => e.TrainingContentId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.TrainingContentsMaster)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_TrainingContentsMaster_Course_CreatedBy");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.TrainingContentsMasterCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_TrainingContentsMaster_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.TrainingContentsMasterModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_TrainingContentsMaster_AspnetUsers_ModifiedBy");
            });

            modelBuilder.Entity<UserCourses>(entity =>
            {
                entity.Property(e => e.UserCoursesId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.UserCourses)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_UserCourses_AspnetUsers_CreatedBy");
            });

            modelBuilder.Entity<UserProfile>(entity =>
            {
                entity.Property(e => e.UserProfileId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).IsFixedLength(true);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.UserProfileCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_UserProfile_AspnetUsers_CreatedBy");

                entity.HasOne(d => d.Login)
                    .WithMany(p => p.UserProfileLogin)
                    .HasForeignKey(d => d.LoginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserProfile_AspnetUsers_ID");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.UserProfileModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_UserProfile_AspnetUsers_ModifiedBy");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}